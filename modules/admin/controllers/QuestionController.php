<?php
/**
 * file: QuestionController.php
 * desc: 题库信息 执行操作控制器
 * date: 2016-10-11 16:49:26
 */

namespace app\modules\admin\controllers;

use app\common\helpers\Helper;
use app\common\models\Answer;
use app\common\models\CarType;
use app\common\models\Chapter;
use app\common\models\Question;
use app\common\models\Special;
use app\common\models\Subject;
use yii\helpers\ArrayHelper;
use yii\helpers\Json;

class QuestionController extends Controller
{
    /**
     * where() 查询处理
     * @param  array $params
     * @return array 返回数组
     */
    public function where($params)
    {
        return [
            'status' => '=',
            'answer_type' => '=',
            'subject_id' => '=',
            'chapter_id' => '=',
            'special_id' => '=',
        ];
    }

    /**
     * actionIndex() 首页显示
     * @return string
     */
    public function actionIndex()
    {
        // 获取数据
        $special = Special::find()->where(['!=', 'pid', 0])->orderBy('sort')->all();
        $chapter = Chapter::find()->orderBy('sort')->all();
        // 查询考试类型
        $cars = CarType::findAll(['status' => 1]);

        $arrChapter = Helper::map($chapter, 'id', 'name');
        $arrSubject = Subject::getSubject();

        return $this->render('index', [
            'cars' => Json::encode(ArrayHelper::map($cars, 'id', 'name')), // 类型
            'subject' => Json::encode($arrSubject), // 科目
            'arrSubject' => $arrSubject,
            'special' => Json::encode(Helper::map($special, 'id', 'name')), // 专项
            'chapter' => Json::encode($arrChapter), // 章节
            'arrChapter' => $arrChapter,
            'status'  => Json::encode(Question::getStatusDesc()),           // 状态
            'color'  => Json::encode(Question::getStatusColor()),           // 状态颜色
            'type'  => Json::encode(Question::getTypeDesc()),               // 答案类型
        ]);
    }

    public function actionCreate()
    {
        if (\Yii::$app->request->isGet) {
            return $this->render('create', [

            ]);
        } else {
            return parent::actionCreate(); // TODO: Change the autogenerated stub
        }
    }

    /**
     * actionSubject() 获取科目
     * @return mixed|string
     */
    public function actionSubject()
    {
        $request = \Yii::$app->request;
        if ($request->isAjax) {
            $intCid = (int)$request->post('cid');
            if ($intCid) {
                $subject = Subject::findAll(['status' => 1, 'car_id' => $intCid]);
                $this->handleJson($subject);
            }
        }

        return $this->returnJson();
    }

    /**
     * actionChapter() 获取章节
     * @return mixed|string
     */
    public function actionChapter()
    {
        $request = \Yii::$app->request;
        if ($request->isAjax) {
            $intSid = (int)$request->post('sid');
            if ($intSid) {
                $subject = Chapter::findAll(['subject_id' => $intSid]);
                $this->handleJson($subject);
            }
        }

        return $this->returnJson();
    }

    /**
     * 处理导入数据
     * @return mixed|string
     */
    public function actionUploadQuestion()
    {
        $request = \Yii::$app->request;
        if ($request->isAjax) {
            $intSubject = (int)$request->post('subject_id');
            $intChapter = (int)$request->post('chapter_id');
            $strFile = trim($request->post('upload_file'));
            if (($intSubject || $intChapter) && $strFile) {
                $objPHPExcel = \PHPExcel_IOFactory::load('.'.$strFile);
                if ($objPHPExcel) {
                    $objWorksheet = $objPHPExcel->getActiveSheet();
                    $intRows = $objWorksheet->getHighestRow(); // 获取总行数

                    // 读取数据的第二行
                    $array = [];
                    $time = time();
                    $fields = [
                        'question_title',
                        'question_content',
                        'answer_type',
                        'answers',
                        'answer_id',
                        'subject_id',
                        'chapter_id',
                        'created_at',
                        'updated_at'
                    ];

                    for ($i = 2; $i <= $intRows; $i ++) {
                        $array[] = [
                            $objWorksheet->getCell('A'.$i)->getValue(),
                            $objWorksheet->getCell('B'.$i)->getValue(),
                            (int)$objWorksheet->getCell('C'.$i)->getValue(),
                            Json::encode(explode('|', $objWorksheet->getCell('D'.$i)->getValue())),
                            (int)$objWorksheet->getCell('E'.$i)->getValue()-1,
                            $intSubject,
                            $intChapter,
                            $time,
                            $time,
                        ];

                        // 所有数据
                        if (count($array) >= 100) {
                            if (\Yii::$app->db->createCommand()->batchInsert('{{%question}}', $fields, $array)->execute()) {
                                $array = [];
                            }
                        }
                    }

                    if (!empty($array)) {
                        if (\Yii::$app->db->createCommand()->batchInsert('{{%question}}', $fields, $array)->execute()) {
                            $isTrue = true;
                        } else {
                            $isTrue = false;
                        }
                    } else {
                        $isTrue = true;
                    }

                    $this->arrJson['errMsg'] = '上传题目处理失败';
                    if ($isTrue) {
                        $this->handleJson($array, 0, '上传题目处理成功');
                    }
                }
            }
        }

        return $this->returnJson();
    }

    /**
     * getModel() 返回model
     * @return Question
     */
    public function getModel()
    {
        return new Question();
    }
}
