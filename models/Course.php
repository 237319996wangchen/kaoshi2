<?php

namespace app\models;

use yii\db\ActiveRecord;
use yii\db\Expression;
use yii\helpers\Json;

class Course extends ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%course}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['name', 'car_id', 'config'], 'required'],
            [['status', 'sort'], 'integer'],
            [['name', 'image'], 'string', 'max' => 255, 'min' => 2],
            [['desc', 'config'], 'string', 'min' => 2, 'max' => 1000],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => '科目分类信息',
            'desc' => '说明',
            'status' => '状态',
            'image' => '图片信息',
            'config' => '配置信息',
            'created_at' => '创建时间',
        ];
    }

    public function beforeValidate()
    {
        if (is_array($this->config)) {
            foreach ($this->config as $key => $value) {
                if (empty($value)) {
                    unset($this->config[$key]);
                }
            }

            $this->config = Json::encode($this->config);
        }

        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    public function beforeSave($insert)
    {
        if ($insert) $this->created_at = new Expression('UNIX_TIMESTAMP()');
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }


    // 获取章节信息
    public function getGuans()
    {
        return $this->hasMany(Guan::className(), ['course_id' => 'id']);
    }

    public static function getSubject($where = [])
    {
        $arrReturn = [
            'subject' => [],
            'car_subject' => [],
        ];
        $where = array_merge(['status' => 1], $where);
        // 查询所有车型
//        $cars = CarType::find()->indexBy('id')->all();
        $cars = [1=>(object)['name'=>'11111']];
        // 查询所有的科目
        $subject = self::find()->where($where)->asArray()->all();
        if ($subject) {
            foreach ($subject as $value) {
                $strName = isset($cars[$value['car_id']]) ? $cars[$value['car_id']]->name.'--'.$value['name'] : $value['name'];
                $arrReturn['subject'][$value['id']] = $strName;
                if (empty($arrReturn['car_subject'][$value['car_id']])) {
                    $arrReturn['car_subject'][$value['car_id']] = [];
                }

                $arrReturn['car_subject'][$value['car_id']][$value['id']] = $strName;
            }
        }

        return $arrReturn;
    }
}
